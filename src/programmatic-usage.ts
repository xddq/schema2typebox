import fs from "node:fs";
import * as prettier from "prettier";
import { cosmiconfig } from "cosmiconfig";
import packageJson from "../package.json";
import { schema2Typebox as Schema2Typebox } from "./schema-to-typebox";

export type Schema2TypeboxOptions = {
  /**
   * Makes the function print and return help text and quit. Has precendence
   * over all other options. Uses console.log to print the help text to stdout.
   */
  help?: true;
  /**
   * The file containing the JSON schema in the current working directory.
   * Defaults to "schema.json" if none is given.
   */
  input?: string;
  /**
   * The resulting file containing the typebox code in the current working
   * directory. Defaults to "generated-types.ts" if none is given.
   */
  output?: string;
  /**
   * Makes the function print the result to stdout instead of writing it to a
   * file. When using in code it makes the function also return a string
   * containing the generated types. Has precedence over "output" argument. Uses
   * console.log to print to stdout.
   */
  outputStdout?: true;
};

/**
 * Just an alias for string. This gets returned by the schema2typebox function and
 * contains the generated types as string.
 */
type GeneratedTypes = string;

/**
 * Use this function for programmatic usage of schema2typebox. The options are typed
 * and commented.
 *
 * @returns The generated types as string if (outputStdout was set) or undefined
 * otherwise.
 *
 * @throws Error
 **/
export const schema2typebox = async ({
  help,
  input,
  output,
  outputStdout,
}: Schema2TypeboxOptions): Promise<GeneratedTypes | undefined> => {
  if (help) {
    console.log(getHelpText.run());
    return;
  }

  const jsonSchema = fs.readFileSync(
    process.cwd() + `/${input === undefined ? "schema.json" : input}`,
    "utf8"
  );
  const generatedTypeboxCode = Schema2Typebox(jsonSchema);

  // post-processing
  // 1. format code
  const explorer = cosmiconfig("prettier");
  const searchResult = await explorer.search();
  const prettierConfig =
    searchResult === null ? {} : (searchResult.config as prettier.Options);
  const formattedResult = prettier.format(generatedTypeboxCode, {
    parser: "typescript",
    ...prettierConfig,
  });
  const result = addCommentThatCodeIsGenerated.run(formattedResult);

  // output (write or stdout and return)
  if (outputStdout) {
    console.log(result);
    return result;
  }

  fs.writeFileSync(
    process.cwd() + `/${output === undefined ? "generated-types.ts" : output}`,
    result,
    {
      encoding: "utf8",
    }
  );
};

/**
 * Declaring this as function in order to make it better testable.
 * Using an object to be able to mock it and track its usage.
 */
export const getHelpText = {
  run: () => {
    return `
    !WIP AND CURRENTLY IN ALPHA (unuseable :p) STATE!
    schema2typebox is a cli tool for converting JSON schema draft-06 files to
    typebox code.  The generated output is formatted based on the prettier
    config inside your repo (or the default one, if you don't have one).
    Version: ${packageJson.version}

    Usage:

    schema2typebox [ARGUMENTS]

    Arguments:

    -h, --help
       Displays this menu.

    -i, --input
       Specifies the relative path to the file containing the typescript types
       that will be used to generated typebox types. Defaults to "types.ts".

    -o, --output
       Specifies the relative path to generated file that will contain the
       typebox types. Defaults to "generated-types.ts".

    --output-stdout
       Does not generate an output file and prints the generated code to stdout
       instead. Has precedence over -o/--output.
   `;
  },
};

/**
 * Declaring this as an object with a function in order to make it better
 * testable with mocks. Allows for tracking the call count.
 */
export const addCommentThatCodeIsGenerated = {
  run: (code: string) => {
    return `/**
 * ATTENTION. This code was AUTO GENERATED by schema2typebox version ${packageJson.version}.
 * While I don't know your use case, there is a high chance that direct changes
 * to this file get lost. Consider making changes to the underlying JSON schema
 * you use to generate this file instead. The default file is called
 * "schema.json", perhaps have a look there! :]
 */

${code}`;
  },
};
